{"version":3,"sources":["Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","tempreature","city","country","humidity","description","error","API_KEY","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","setState","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sOAWeA,EATF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,gBAC9C,iDC+BGC,EApCC,SAACN,GACT,OACI,yBAAKO,UAAU,QAEPP,EAAMQ,aACN,uBAAGD,UAAU,YAAb,gBACI,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMQ,cAGzCR,EAAMS,MACN,uBAAGF,UAAU,YAAb,SACI,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMS,OAGzCT,EAAMU,SACN,uBAAGH,UAAU,YAAb,YACI,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMU,UAGzCV,EAAMW,UACN,uBAAGJ,UAAU,YAAb,aACI,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMW,WAGzCX,EAAMY,aACN,uBAAGL,UAAU,YAAb,gBACI,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMY,cAGzCZ,EAAMa,OACN,uBAAGN,UAAU,YAAb,UACI,0BAAMA,UAAU,cAAhB,IAA+BP,EAAMa,UC3BvDC,EAAU,mCA+DDC,E,4MA1DbC,MAAQ,CACNR,YAAa,GACbC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,I,EAGTX,W,uCAAa,WAAQe,GAAR,qBAAAC,EAAA,6DACXD,EAAEE,iBAEIV,EAAOQ,EAAEG,OAAOC,SAASZ,KAAKa,MAC9BZ,EAAUO,EAAEG,OAAOC,SAASX,QAAQY,MAJ/B,SAMOC,MAAM,oDAAD,OAAqDd,EAArD,YAA6DC,EAA7D,kBAA8EI,IAN1F,cAMLU,EANK,gBAOQA,EAAIC,OAPZ,OAOLC,EAPK,OAQRjB,GAAQC,EACT,EAAKiB,SAAS,CACZnB,YAAakB,EAAKE,KAAKC,KACvBpB,KAAMiB,EAAKtB,KACXM,QAASgB,EAAKI,IAAIpB,QAClBC,SAAUe,EAAKE,KAAKjB,SACpBC,YAAac,EAAKK,QAAQ,GAAGnB,YAC7BC,MAAO,KAGT,EAAKc,SAAS,CACZnB,YAAa,GACbC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,MAAO,kCAxBA,4C,6GA+BX,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAML,WAAY8B,KAAK9B,aACvB,kBAAC,EAAD,CACIM,YAAcwB,KAAKhB,MAAMR,YACzBC,KAAOuB,KAAKhB,MAAMP,KAClBC,QAAUsB,KAAKhB,MAAMN,QACrBC,SAAWqB,KAAKhB,MAAML,SACtBC,YAAcoB,KAAKhB,MAAMJ,YACzBC,MAAQmB,KAAKhB,MAAMH,c,GApDfoB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.5a6e35e4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = (props) =>  { \n    return(\n        <form onSubmit={props.getWeather}>\n            <input type=\"text\" name=\"city\" placeholder=\"City ...\" />\n            <input type=\"text\" name=\"country\" placeholder=\"Country ...\" />\n            <button>Get Weather</button>\n        </form>\n    )\n}\nexport default Form ","import React from 'react';\n\nconst Weather = (props) => { \n        return(\n            <div className=\"info\">\n                {\n                    props.tempreature &&\n                    <p className=\"info_key\"> Tempreature:\n                        <span className=\"info_value\"> {props.tempreature}</span></p>\n                }\n                {\n                    props.city &&\n                    <p className=\"info_key\"> City:\n                        <span className=\"info_value\"> {props.city}</span></p>\n                }\n                {\n                    props.country &&\n                    <p className=\"info_key\"> Country:\n                        <span className=\"info_value\"> {props.country}</span></p>\n                }\n                {\n                    props.humidity &&\n                    <p className=\"info_key\"> Humidity:\n                        <span className=\"info_value\"> {props.humidity}</span></p>\n                }\n                {\n                    props.description &&\n                    <p className=\"info_key\"> Description:\n                        <span className=\"info_value\"> {props.description}</span></p>\n                }\n                {\n                    props.error &&\n                    <p className=\"info_key\"> error:\n                        <span className=\"info_value\"> {props.error}</span></p>\n                } \n            </div>\n        ) \n}\nexport default Weather;","import React, { Component } from 'react'; \nimport Form from './Components/Form';\nimport Weather from './Components/Weather';\n\n\n\nconst API_KEY = \"a7f9e64ba4e3d508f85bda742ab459f6\";\n// http://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=e36ed364400282e43250b6c4c0274d44\n\nclass App extends Component {\n\n  state = {\n    tempreature: '',\n    city: '',\n    country: '',\n    humidity: '',\n    description: '',\n    error: ''\n  }\n\n  getWeather = async  (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`)\n    const data = await api.json();\n    if(city && country) {\n      this.setState({\n        tempreature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: ''\n      })\n    } else {\n      this.setState({\n        tempreature: '',\n        city: '',\n        country: '',\n        humidity: '',\n        description: '',\n        error: 'Please Enter City And Country'\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-container\">\n          <Form getWeather={this.getWeather}/>\n          <Weather \n              tempreature= {this.state.tempreature}\n              city= {this.state.city}\n              country= {this.state.country}\n              humidity= {this.state.humidity}\n              description= {this.state.description}\n              error= {this.state.error} \n          />\n        </div> \n      </div>\n    );    \n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}